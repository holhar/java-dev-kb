package de.holhar.java_dev_kb.training.concurrency.ch06_task_execution.s3_exploitable_parallelism;

import de.holhar.java_dev_kb.training.concurrency.ch06_task_execution.util.Ad;
import de.holhar.java_dev_kb.training.concurrency.ch06_task_execution.util.TravelCompany;
import de.holhar.java_dev_kb.training.concurrency.ch06_task_execution.util.TravelInfo;
import de.holhar.java_dev_kb.training.concurrency.ch06_task_execution.util.TravelQuote;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.concurrent.Callable;
import java.util.concurrent.CancellationException;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

/**
 * Requesting travel quotes under a time budget.
 */
public class TravelBidFetcher {

    private static final int NTHREADS = 100;
    private static final ExecutorService executor = Executors.newFixedThreadPool(NTHREADS);

    public List<TravelQuote> getRankedTravelQuotes(TravelInfo travelInfo, Set<TravelCompany> companies,
                                                   Comparator<TravelQuote> ranking, long time, TimeUnit unit) throws InterruptedException {
        List<QuoteTask> tasks = new ArrayList<>();
        companies.forEach(company -> tasks.add(new QuoteTask(company, travelInfo)));

        List<Future<TravelQuote>> futures = executor.invokeAll(tasks, time, unit);

        List<TravelQuote> quotes = new ArrayList<>(tasks.size());
        Iterator<QuoteTask> taskIterator = tasks.iterator();
        for (Future<TravelQuote> f : futures) {
            QuoteTask task = taskIterator.next();
            try {
                quotes.add(f.get());
            } catch (ExecutionException e) {
                quotes.add(task.getFailureQuote(e.getCause()));
            } catch (CancellationException e) {
                quotes.add(task.getTimeoutQuote(e));
            }
        }

        quotes.sort(ranking);
        return quotes;
    }
}

class QuoteTask implements Callable<TravelQuote> {

    private final TravelCompany company;
    private final TravelInfo travelInfo;

    public QuoteTask(TravelCompany company, TravelInfo travelInfo) {
        this.company = company;
        this.travelInfo = travelInfo;
    }

    public TravelQuote call() throws Exception {
        return company.solicitQuote(travelInfo);
    }

    public TravelQuote getFailureQuote(Throwable e) {
        // ...
        return new TravelQuote();
    }

    public TravelQuote getTimeoutQuote(CancellationException e) {
        // ...
        return new TravelQuote();
    }
}