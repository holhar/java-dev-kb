package de.holhar.java_dev_kb.training.concurrency.ch06_task_execution.s6_3_exploitable_parallelism;

import de.holhar.java_dev_kb.training.concurrency.utils.ExceptionUtils;
import de.holhar.java_dev_kb.training.concurrency.ch06_task_execution.util.ImageData;
import de.holhar.java_dev_kb.training.concurrency.ch06_task_execution.util.ImageInfo;

import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorCompletionService;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;

/**
 * Using CompletionService to render page elements as they become available.
 */
public class Renderer extends AbstractRenderer {

    private final ExecutorService executor;

    public Renderer(ExecutorService executor) {
        this.executor = executor;
    }

    public void renderPage(CharSequence source) {
        final List<ImageInfo> imageInfos = scanForImageInfo(source);
        final ExecutorCompletionService<ImageData> completionService = new ExecutorCompletionService<>(executor);
        imageInfos.forEach(info -> completionService.submit(info::downloadImage));
        renderText(source);

        try {
            for (int t = 0, n = imageInfos.size(); t < n; t++) {
                Future<ImageData> f = completionService.take();
                ImageData imageData = f.get();
                renderImage(imageData);
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        } catch (ExecutionException e) {
            throw ExceptionUtils.launderThrowable(e.getCause());
        }
    }
}
