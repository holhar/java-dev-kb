package de.holhar.java_dev_kb.training.concurrency.ch06_task_execution.s3_exploitable_parallelism;

import de.holhar.java_dev_kb.training.concurrency.utils.ExceptionUtils;
import de.holhar.java_dev_kb.training.concurrency.ch06_task_execution.util.ImageData;
import de.holhar.java_dev_kb.training.concurrency.ch06_task_execution.util.ImageInfo;

import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.stream.Collectors;

/**
 * Waiting for image download with Future.
 */
public class FutureRenderer extends AbstractRenderer {

    private static final int NTHREADS = 100;
    private static final ExecutorService executor = Executors.newFixedThreadPool(NTHREADS);

    public void renderPage(CharSequence source) {
        final List<ImageInfo> imageInfos = scanForImageInfo(source);
        Callable<List<ImageData>> task = () -> imageInfos.stream().map(ImageInfo::downloadImage).collect(Collectors.toList());
        Future<List<ImageData>> future = executor.submit(task);
        renderText(source);

        try {
            List<ImageData> imageData = future.get();
            for (ImageData data : imageData) {
                renderImage(data);
            }
        } catch (InterruptedException e) {
            // Re-assert the thread's interrupted status
            Thread.currentThread().interrupt();
            // We don't need the result, so cancel the task too
            future.cancel(true);
        } catch (ExecutionException e) {
            throw ExceptionUtils.launderThrowable(e.getCause());
        }
    }
}
