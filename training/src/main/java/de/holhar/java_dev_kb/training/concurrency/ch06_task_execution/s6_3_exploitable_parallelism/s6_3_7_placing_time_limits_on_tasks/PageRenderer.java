package de.holhar.java_dev_kb.training.concurrency.ch06_task_execution.s6_3_exploitable_parallelism.s6_3_7_placing_time_limits_on_tasks;

import de.holhar.java_dev_kb.training.concurrency.ch06_task_execution.util.Ad;
import de.holhar.java_dev_kb.training.concurrency.ch06_task_execution.util.Page;

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

/**
 * Fetching an advertisement with a time budget.
 */
public class PageRenderer {

    private static final long TIME_BUDGET = 2000;
    private static final int NTHREADS = 100;

    private static final Ad DEFAULT_AD = new Ad();

    private static final ExecutorService executor = Executors.newFixedThreadPool(NTHREADS);

    public Page renderPageWithAd() throws InterruptedException {
        long endNanos = System.nanoTime() + TIME_BUDGET;
        Future<Ad> f = executor.submit(new FetchAdTask());
        // Render the page while waiting for the ad
        Page page = renderPageBody();
        Ad ad;
        try {
            // Only wait for the remaining time budget
            long timeLeft = endNanos - System.nanoTime();
            ad = f.get(timeLeft, TimeUnit.NANOSECONDS);
        } catch (ExecutionException e) {
            ad = DEFAULT_AD;
        } catch (TimeoutException e) {
            ad = DEFAULT_AD;
            f.cancel(true);
        }
        page.setAd(ad);
        return page;
    }

    private Page renderPageBody() {
        // ...
        return null;
    }
}
class FetchAdTask implements Callable<Ad> {

    @Override
    public Ad call() throws Exception {
        return null;
    }
}
